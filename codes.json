[{"id": 2, "title": "Generate secret key", "content": "import secrets\r\nsecrets.token_hex(16)\r\n# -> 'de5e074a99a7b554571059c5d8e465e7'"}, {"id": 3, "title": "Requests usage", "content": "import requests\r\n\r\n# Get\r\nresponse = requests.get(url, timeout=20)\r\n\r\nif response.status_code==200:\r\n  j = response.json()\r\n  \r\n# Post\r\n\r\nurl = 'http://inbanapl0006.ls.ege.ds:8081/api/fetchDistance'\r\npayload = {\r\n  'ReqAPIKey' : 'eIn01AaKA',\r\n  'SourceAddress' :\"some\",\r\n  'DestinationAddress' : \"else address\"\r\n}\r\nresponse = requests.post(url, json=payload)"}, {"id": 4, "title": "Threading", "content": "    # Traditional Implementation\r\n    threads = []\r\n    \r\n    for _ in range(10):\r\n        t = threading.Thread(target=do_something, args=[1.0], daemon=True)\r\n        t.start()\r\n        threads.append(t)\r\n    \r\n    for thread in threads:\r\n        thread.join()\r\n\r\n    # Updated Implementation\r\n    with concurrent.futures.ThreadPoolExecutor() as executor:\r\n        # Boring\r\n        f1 = executor.submit(do_something, 1)\r\n        f2 = executor.submit(do_something, 1)\r\n        print(f1.result())\r\n        print(f2.result())\r\n    \r\n        # Bit more interesting\r\n        secs = [5, 4, 3, 2, 1]  # Sorted descending purposely!\r\n        results = [executor.submit(do_something, sec) for sec in secs]\r\n        for f in concurrent.futures.as_completed(results):\r\n            print(f.result())\r\n    \r\n        # Cool\r\n        secs = [5, 4, 3, 2, 1]\r\n        results = executor.map(do_something, secs)\r\n        for result in results:\r\n            print(result)\r\n"}, {"id": 5, "title": "sqlAlchemy - flask setup", "content": "# in config:\r\n SQLALCHEMY_DATABASE_URI = 'postgresql://<user>:<pw>@<address>:<port>/<db_name>'\r\n  \r\n# In __init__.py\r\nfrom flask_sqlalchemy import SQLAlchemy\r\ndb = SQLAlchemy()\r\n\r\ndef create_app(config_class=Config):\r\n    app = Flask(__name__)\r\n    app.config.from_object(Config)\r\n    db.init_app(app)\r\n    \r\n# In Models:\r\nfrom <project_name> import db\r\n  \r\nclass Website(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.Text, nullable=False)\r\n    status = db.Column(db.String(40), nullable=False)\r\n    date = db.Column(db.Date, default=datetime.utcnow())\r\n    datetime = db.Column(db.DateTime, default=datetime.utcnow())\r\n    clicks = db.Column(db.BigInteger)\r\n    isUp = db.Column(db.Boolean)\r\n    birth = db.Column(db.Date)\r\n    floating = db.Column(db.Float)"}, {"id": 6, "title": "sqlAlchemy - filter", "content": "# simple Filter\r\nusers = Users.query.filter(Users.age > 18)\r\n\r\n# get first\r\nuser = Users.query.filter(Users.age > 18).first()\r\n\r\n# multible filters\r\nuser = Users.query.filter(Users.age > 18).filter(Users.name ==\"Maier\")\r\n\r\n# filter to list\r\nparents = [ [{el.father},{el.mother}] for el in Users.query.filter(Users.name==\"Maier\")]\r\n\r\n# filter_by uses attribute directly\r\nparents = [ [{el.father},{el.mother}] for el in Users.query.filter_by(name==\"Maier\")]\r\n"}, {"id": 7, "title": "js - get current url", "content": "    var url_complete = window.location.pathname;\r\n    var urlsub = url_complete.substring(1);\r\n    var n = urlsub.search(\"/\") + 1;\r\n    var url = url_complete.substring(0, n)"}, {"id": 8, "title": "jQuery - document ready", "content": "$(function()  {\r\n    \r\n});"}, {"id": 9, "title": "requests using self signed certificates", "content": "import requests\r\nsession = requests.Session()\r\nresp = session.get(\"url\", verify=False)\r\nresp.status_code\r\n\r\n# POST\r\nsession = requests.Session()\r\nresp = session.post(\"http://127.0.0.1:5000/test\", params={'name': 'testCategory'}, verify=False)\r\nprint(resp.json())"}, {"id": 10, "title": "sqlAlchemy - query distinct", "content": "users = [[f'{el.name}'] for el in Users.query.distinct(Users.name, Users.mail)]\r\n\r\ndivisions = [f'{el.division}' for el in \r\n    Allocation_Upload.query.filter(Allocation_Upload.period == semester)\r\n    .distinct(Allocation_Upload.division)]"}, {"id": 11, "title": "check if directory / file / path exists", "content": "import os\r\nprint(os.path.isdir(\"/home/el\"))\r\nprint(os.path.exists(\"/home/el/myfile.txt\"))"}, {"id": 12, "title": "datetime to string", "content": "from datetime import datetime\r\n\r\ns = datetime.now().strftime(\"%d-%m-%y %H:%M:%S\")\r\nprint(s)"}, {"id": 13, "title": "list files in current directory", "content": "import os\n\ncurrent_working_directory = os.getcwd()\n\nfor file in os.listdir(current_working_directory):\n    print(file)"}, {"id": 14, "title": "send mail", "content": "import os\r\nimport smtplib\r\nfrom os.path import basename\r\nfrom email import encoders\r\nfrom email.mime.base import MIMEBase\r\nfrom email.mime.audio import MIMEAudio\r\nfrom email.mime.multipart import MIMEMultipart\r\nfrom email.mime.text import MIMEText\r\nfrom email.mime.image import MIMEImage\r\nfrom email.utils import COMMASPACE, formatdate\r\nimport mimetypes\r\n\r\n\r\nclass mailConnection:\r\n    '''\r\n    Class for sending mails anonymously.\r\n    WARNING: using port 25 --> not encrypted.\r\n    '''\r\n\r\n    def __init__(self, server='smtp-eu.dc.ege.ds', port=25):\r\n        self._server = server\r\n        self._port = port\r\n\r\n    # Method to send mails, optionally: add appendices\r\n    def send_mail(self, send_from, send_to, subject, text, send_CC=None,\r\n                  send_BCC=None, file_dir=None, file_list=None, format=None):\r\n        '''\r\n        Note: send_to expects input of type list\r\n        '''\r\n        try:\r\n\r\n            # Message parameters\r\n            msg = MIMEMultipart()\r\n            msg['From'] = send_from\r\n            msg['To'] = COMMASPACE.join(send_to)\r\n            if send_CC:\r\n                msg['CC'] = COMMASPACE.join(send_CC)\r\n            if send_BCC:\r\n                msg['BCC'] = COMMASPACE.join(send_BCC)\r\n            msg['Subject'] = subject\r\n            msg['Date'] = formatdate(localtime=True)\r\n            if format:\r\n                msg.attach(MIMEText(text,format))\r\n            else:\r\n                msg.attach(MIMEText(text))\r\n\r\n            # Attachments\r\n            if file_dir and file_list:\r\n\r\n                # Iterateve over files\r\n                for file in file_list or []:\r\n                    print(f'Parsing attachment: \"{file}\" ...')\r\n                    ctype, encoding = mimetypes.guess_type(file)\r\n\r\n                    # Set types if not determined automatically\r\n                    if ctype is None or encoding is not None:\r\n                        ctype = 'application/octet-stream'\r\n\r\n                    # Assign MIME types\r\n                    maintype, subtype = ctype.split('/', 1)\r\n\r\n                    # Build file path\r\n                    file_path = os.path.join(file_dir, file)\r\n\r\n                    if maintype == 'text':\r\n                        with open(file_path, 'r') as fp:\r\n                            part = MIMEText(fp.read(), _subtype=subtype)\r\n                    elif maintype == 'image':\r\n                        with open(file_path, 'rb') as fp:\r\n                            part = MIMEImage(fp.read(), _subtype=subtype)\r\n                    elif maintype == 'audio':\r\n                        with open(file_path, 'rb') as fp:\r\n                            part = MIMEAudio(fp.read(), _subtype=subtype)\r\n                    else:\r\n                        with open(file_path, 'rb') as fp:\r\n                            part = MIMEBase(maintype, subtype)\r\n                            part.set_payload(fp.read())\r\n                            encoders.encode_base64(part)\r\n\r\n                    # Attach file to message\r\n                    part.add_header('Content-Disposition', 'attachment',\r\n                                    filename=basename(file))\r\n                    msg.attach(part)\r\n\r\n            elif file_dir or file_list:\r\n                print('''NOTE: Attachment not added.\r\n                 Please specifiy both path and files!''')\r\n\r\n            # Send via SMTP server (works only with internal recipients)\r\n            with smtplib.SMTP(host=self._server, port=self._port) as smtp:\r\n                smtp.send_message(msg)\r\n\r\n            print(f'SUCCESS! Mail sent to {send_to}.')\r\n\r\n        # Output expected AssertionErrors\r\n        except AssertionError as error:\r\n            print(f'''ERROR! List type for parameter \"send_to\" to expected,\r\n             found: {send_to}!''')\r\n            print(error)\r\n\r\n        # Output unexpected Exceptions\r\n        except Exception as exception:\r\n            print(f'''ERROR! Could not send mail on server {self._server},\r\n             port {self._port}!''')\r\n            print(f'Exception: {exception}')\r\n"}, {"id": 15, "title": "sqlAlchemy - like", "content": "# select * from Books where name like \"%Harry Potter%\"\r\ntag =\"Harry Potter\"\r\nsearch = \"%{}%\".format(tag)\r\nbooks = Books.query.filter(Books.tags.like(search)).all()"}, {"id": 16, "title": "sort list of dics", "content": "# Initializing list of dictionaries\r\nlis = [{ \"name\" : \"Nandini\", \"age\" : 20},\r\n{ \"name\" : \"Manjeet\", \"age\" : 20 },\r\n{ \"name\" : \"Nikhil\" , \"age\" : 19 }]\r\n \r\n# using sorted and lambda to print list sorted\r\n# by age\r\nprint \"The list printed sorting by age: \"\r\nprint sorted(lis, key = lambda i: i['age'])\r\n \r\nprint (\"\\r\")\r\n \r\n# using sorted and lambda to print list sorted\r\n# by both age and name. Notice that \"Manjeet\"\r\n# now comes before \"Nandini\"\r\nprint \"The list printed sorting by age and name: \"\r\nprint sorted(lis, key = lambda i: (i['age'], i['name']))\r\n \r\nprint (\"\\r\")\r\n \r\n# using sorted and lambda to print list sorted\r\n# by age in descending order\r\nprint \"The list printed sorting by age in descending order: \"\r\nprint sorted(lis, key = lambda i: i['age'],reverse=True)"}, {"id": 17, "title": "jQuery - AJAX template", "content": "            \r\nvar url_complete = window.location.pathname;\r\nvar urlsub = url_complete.substring(1);\r\nvar n = urlsub.search(\"/\") + 1;\r\nvar url = url_complete.substring(0, n)\r\n$.ajax({\r\n    data: {\r\n        email: name\r\n    },\r\n    type: 'POST',\r\n    url: url + '/removeAdmin'\r\n}).done(function (data) {\r\n    location.reload();\r\n});"}, {"id": 18, "title": "sqlAlchemy - or", "content": "from sqlalchemy import or_\r\nbooks = Book.query.filter(or_(Book.price <20, Book.price >10))"}, {"id": 19, "title": "sqlAlchemy - order by", "content": "status = Status.query.order_by(Status.date)\r\n\r\n# order by desc\r\nstatus = Status.query.order_by(Status.date.desc())\r\n\r\n# order by multible columns\r\nstatus = Status.query.order_by(Status.page_id,Status.date.desc())"}, {"id": 20, "title": "jQuery - toggle modal", "content": "$('#editModal').modal('toggle')"}, {"id": 21, "title": "jQuery - interate elements in ui element", "content": "$('#container_id').find('input[type=checkbox]').each(function () {\r\n    if ($(this).checked)\r\n        console.log($(this).attr('data-id'))\r\n});"}, {"id": 22, "title": "string to datetime", "content": "from datetime import datetime\r\ns = \"2021-06-07 15:23:59\"\r\ndate = datetime.strptime(s, \"%Y-%m-%d %H:%M:%S\")"}, {"id": 23, "title": "jQuery - trigger event / perform click", "content": "$('#btn_search').trigger('click')\r\n\r\n// Allgemein:\r\n$(<element>).trigger(<listener>)"}, {"id": 24, "title": "counter - most common", "content": "from collections import Counter\r\n\r\nli = [\r\n    \"Das ist ein Test der Anwendung\",\r\n    \"Das ist ein Test der Anwendung\",\r\n    \"Das ist ein Test deiner Mutter\",\r\n    \"Das ist ein Test der Anwendung\",\r\n    \"Mein Beispielsatz Test der Anwendung\"]\r\nmycount = Counter(sub)\r\nprint(mycount.most_common(5))"}, {"id": 25, "title": "sort list by column", "content": "# Sort by col 3in reverse\r\npages = sorted(pages, key=itemgetter(3), reverse=True)"}, {"id": 26, "title": "random", "content": "# Die wichtigen random / Zufallszahlen Funktionen\r\n\r\nfrom random import *\r\n\r\nprint(random())         #  random float in [0.0, 1.0)\r\n\r\n# Functions for integers\r\nrandom.randrange(10)         # random int in [0, 10)\r\nrandom.randrange(4,10)       # random int in [4, 10)\r\nrandom.randrange(4,10,2)     # random int in [4, 10), step width 2\r\nrandom.randint(3,8)         # random int in [3,8]\r\n\r\n# Function for float\r\nround(random.uniform(0.1,0.9),1)    # random float in [0.1,0.9] rounded to 1 decimal"}, {"id": 27, "title": "pandas - read sql", "content": "import pandas as pd\r\nfrom sqlalchemy import create_engine\r\n\r\ncnx = create_engine(\"sqlite:///Translator.db\")\r\ndf = pd.read_sql(\"select * from Synonyms\", cnx)"}, {"id": 28, "title": "select2 - add items dynamically", "content": "// clear all option\r\n$('#select_with_blank_data').html('').select2({data: [{id: '', text: ''}]});\r\n\r\n// clear and add new option\r\n$(\"#select_with_data\").html('').select2({data: [\r\n {id: '', text: ''},\r\n {id: '1', text: 'Facebook'},\r\n {id: '2', text: 'Youtube'},\r\n {id: '3', text: 'Instagram'},\r\n {id: '4', text: 'Pinterest'}]});\r\n\r\n\r\n\r\n//  append option\r\n$(\"#select_with_data\").append('<option value=\"5\">Twitter</option>');\r\n$(\"#select_with_data\").val('5');\r\n$(\"#select_with_data\").trigger('change');"}, {"id": 29, "title": "bootstrap - CheckBox", "content": "<div class=\"form-check\">\r\n  <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n  <label class=\"form-check-label\" for=\"flexCheckDefault\">\r\n  \tDefault checkbox\r\n  </label>\r\n</div>"}, {"id": 30, "title": "PIL - rescale image", "content": "from PIL import Image\r\nimage = Image.open(\"foto.jpg\")\r\nimage.save(\"new.jpg\", quality=25)"}, {"id": 31, "title": "most frequent words in string", "content": "# count words in string\r\n\r\nfrom collections import Counter\r\n\r\nCounters_found = Counter(stemmedWords)\r\nmost_occur = Counters_found.most_common(20)\r\n\r\nprint(most_occur)"}, {"id": 32, "title": "button with icon", "content": "<button class=\"btn btn-danger\" style=\"width: 38px;\">\r\n\t<i class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n</button>"}, {"id": 33, "title": "sqlAlchemy - filter parameter in lower case", "content": "from sqlalchemy import func\r\nsyn = Synonym.query.filter(\r\n  func.lower(Synonym.word) == func.lower(\"mySearchString\"))\r\n  .first()"}, {"id": 34, "title": "time measurement", "content": "import time\r\nstartTime = time.time()\r\n\r\n#####your python script#####\r\n\r\nexecutionTime = (time.time() - startTime)\r\nprint('Execution time in seconds: ' + str(executionTime))"}, {"id": 35, "title": "select2 - minimal example", "content": "<link href=\"https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css\" rel=\"stylesheet\" />\r\n<script src=\"https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js\"></script>\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <select class=\"js-example-basic-single\" name=\"state\">\r\n            <option value=\"AL\">Alabama</option>\r\n            ...\r\n            <option value=\"WY\">Wyoming</option>\r\n        </select>\r\n    </div>\r\n</div>\r\n\r\n<script>\r\n    // In your Javascript (external .js resource or <script> tag)\r\n    $(document).ready(function () {\r\n        $('.js-example-basic-single').select2();\r\n    });\r\n</script>"}, {"id": 36, "title": "pandas - remove column", "content": "# drop / remove / delete column\r\n\r\ndf.drop(['<col_name>'], axis=1)"}, {"id": 37, "title": "pandas - remove column", "content": "# drop / remove / delete column\r\n\r\ndf.drop(['<col_name>'], axis=1)"}, {"id": 38, "title": "pandas - remove column", "content": "# drop / remove / delete column\r\n\r\ndf.drop(['<col_name>'], axis=1)"}, {"id": 39, "title": "pandas - delete row where col attribute not in list", "content": "import pandas as pd\r\n\r\nfoo = [['Stephan', 31, 'Braun'], ['Raphael', 28, 'Blau'], ['Corinna', 31, 'Blau'],['Anna', 31, 'Grün']]\r\ndf = pd.DataFrame(foo, columns=['Name','Alter','Augenfarbe'])\r\n\r\nfarben = ['Braun', 'Grün']\r\n\r\ndf = df[~df['Augenfarbe'].isin(farben)]"}, {"id": 40, "title": "ag-grid - minimal example", "content": "{% extends \"layout.html\" %}aa\r\n{% block content %}a\r\n\r\n\r\n<script src=\"https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.noStyle.js\"></script>\r\n<link rel=\"stylesheet\" href=\"https://unpkg.com/ag-grid-community/dist/styles/ag-grid.css\">\r\n<link rel=\"stylesheet\" href=\"https://unpkg.com/ag-grid-community/dist/styles/ag-theme-alpine.css\">\r\n\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div id=\"myGrid\" class=\"ag-theme-alpine\" style=\"height: 600px;\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<script type=\"text/javascript\" charset=\"utf-8\">\r\n    // specify the columns\r\n    const columnDefs = [\r\n        { field: \"make\" },\r\n        { field: \"model\" },\r\n        { field: \"price\" }\r\n    ];\r\n\r\n    // specify the data\r\n    const rowData = [\r\n        { make: \"Toyota\", model: \"Celica\", price: 35000 },\r\n        { make: \"Ford\", model: \"Mondeo\", price: 32000 },\r\n        { make: \"Porsche\", model: \"Boxter\", price: 72000 }\r\n    ];\r\n\r\n    // let the grid know which columns and what data to use\r\n    const gridOptions = {\r\n        columnDefs: columnDefs,\r\n        rowData: rowData\r\n    };\r\n\r\n    // lookup the container we want the Grid to use\r\n    const eGridDiv = document.querySelector('#myGrid');\r\n\r\n    // create the grid passing in the div to use together with the columns & data we want to use\r\n    new agGrid.Grid(eGridDiv, gridOptions);\r\n\r\n</script>\r\n\r\n\r\n{% endblock content %}"}, {"id": 41, "title": "bootstrap - horizontal form", "content": "<form class=\"form-horizontal\" action=\"/action_page.php\">\r\n  <div class=\"form-group\">\r\n    <label class=\"control-label col-sm-2\" for=\"email\">Email:</label>\r\n    <div class=\"col-sm-10\">\r\n      <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter email\">\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label class=\"control-label col-sm-2\" for=\"pwd\">Password:</label>\r\n    <div class=\"col-sm-10\">\r\n      <input type=\"password\" class=\"form-control\" id=\"pwd\" placeholder=\"Enter password\">\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <div class=\"col-sm-offset-2 col-sm-10\">\r\n      <div class=\"checkbox\">\r\n        <label><input type=\"checkbox\"> Remember me</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <div class=\"col-sm-offset-2 col-sm-10\">\r\n      <button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n    </div>\r\n  </div>\r\n</form>"}, {"id": 42, "title": "flask | ajax - post json", "content": "$.ajax({\r\n    data: JSON.stringify(params),\r\n    contentType: \"application/json\",\r\n    dataType: 'json',\r\n    type: 'POST',\r\n    url: url + '/process_files'\r\n}).done(function (data) {\r\n    location.reload();\r\n});\r\n  \r\n@main.route('/process_files', methods=['POST'])\r\n@main.route('/talk/process_files', methods=['POST'])\r\ndef process_files():\r\n    params = request.get_json()"}, {"id": 43, "title": "jQuery - disable/enable element", "content": "$('#btn_add').prop('disabled', true)"}, {"id": 44, "title": "jQuery - Add listener to dynamically added elements", "content": "$('#parent').on('click', '<child>(a, .element)', function(el) {\r\n    if(something_changed && save_before_change()){\r\n        save_curreent_element(selected_id, $('#title').val(), editor.getValue()) \r\n    }\r\n    console.log('Element clicked')\r\n    eel.get_code($(el.target).attr('data-id'))((code) =>{\r\n        $('#title').val(code['title'])\r\n        selected_id = code['id']\r\n        editor.setValue(code['content'])\r\n        editor.moveCursorTo(0,0)\r\n    })\r\n})"}, {"id": 45, "title": "flask - custom validator", "content": "class CreateUserForm(FlaskForm):\r\n    field_1 = StringField(label=('a field'))\r\n    field_2 = StringField(label=('another_field'))\r\n\r\n    submit = SubmitField(label=('Submit'))\r\n\r\n    def validate_field_1(self, field_1):\r\n        if self.field_1.data == self.field_2.data:\r\n            raise ValidationError(f\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")"}, {"id": 46, "title": "jQuery - set/get checkbox check state", "content": "// get state\r\nchecked = $(checkbox).prop(\"checked\")\r\n\r\n// set state\r\n$(checkbox).prop(\"checked\", checked)"}, {"id": 47, "title": "js - round", "content": "parseFloat(mydata[i].distance).toFixed(2) <!-- Auf 2 Nachkommastellen -->"}, {"id": 48, "title": "vscode - add venv to kernels", "content": "# Create venv\r\npython -m venv venv\r\n# Activate venv\r\n.\\myvenv\\Scripts\\activate\r\n# install kernel\r\npip install ipykernel\r\n# add to vs code\r\npython -m ipykernel install --user --name venv --display-name \"jupyter_env\"\r\n# restart VS Code\r\n\r\n# Source:\r\n# https://srinivas1996kumar.medium.com/adding-custom-kernels-to-a-jupyter-notebook-in-visual-studio-53e4d595208c"}, {"id": 49, "title": "bs4 - minimal example", "content": "from bs4 import BeautifulSoup\r\nimport urllib.request\r\nfp = urllib.request.urlopen(\"<url>\")\r\nmybytes = fp.read()\r\n\r\nmystr = mybytes.decode(\"utf8\")\r\nfp.close()\r\n\r\nsoup = BeautifulSoup(mystr)\r\n\r\ningredients = soup.find('table', {'class': 'ingredients'}).find('tbody')"}, {"id": 50, "title": "sqlAlchemy - vanilla example", "content": "from sqlalchemy import create_engine\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nengine = create_engine(\"postgresql://aituser:aitpwd@deaugapp0019.ls.ege.ds:5432/aittalk\",echo = True)\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\nsynonyms = session.query(Synonym).filter(Synonym.language_id==2)"}, {"id": 51, "title": "bootstrap - modal minimal example", "content": "<!-- Button trigger modal -->\r\n<button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">\r\n  Launch demo modal\r\n</button>\r\n\r\n<!-- Modal -->\r\n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        ...\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n        <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"}, {"id": 52, "title": "get file extension", "content": "# returns the file name and file extension\r\nimport os\r\nf_name, f_ext = os.path.splitext('file.txt')\r\nprint(f_ext)"}, {"id": 53, "title": "filter", "content": "foo = [\r\n    {'name':'Stephan','age': 31, 'eye_color':'Braun'}, \r\n    {'name':'Raphael','age': 28, 'eye_color':'Blau'}, \r\n    {'name':'Corinna','age': 31, 'eye_color':'Blau'},\r\n    {'name':'Ibn','age': 12, 'eye_color':'Braun'}, \r\n    {'name':'Anna','age': 31, 'eye_color':'Grün'}]\r\n\r\nbrown_eyed_girls = filter(lambda x: x['eye_color']==\"Braun\", foo)\r\n\r\nprint(list(brown_eyed_girls))\r\n\r\n#-- > [{'name': 'Stephan', 'age': 31, 'eye_color': 'Braun'}, \r\n#-- >{'name': 'Ibn', 'age': 12, 'eye_color': 'Braun'}]"}, {"id": 54, "title": "pandas - write to different sheets", "content": "# Write multiple DataFrames to sheets in excel\r\nimport pandas as pd\r\n\r\nwriter = pd.ExcelWriter('output.xlsx', engine='xlsxwriter')\r\n\r\ndf_deviation.to_excel(writer,sheet_name=\"Deviation\", index=False)\r\ndf_warranty.to_excel(writer,sheet_name=\"Warranty\", index=False)\r\nwriter.save()"}, {"id": 55, "title": "css - make text uncopyable", "content": "body {\r\n-moz-user-select: none;\r\n-khtml-user-select: none;\r\nuser-select: none;\r\n}"}, {"id": 56, "title": "pandas - fill nan", "content": "df.fillna(value=\"\", inplace=True)"}, {"id": 57, "title": "pandas - sort by column", "content": "df.sort_values(by=['word'], inplace=True)\r\n# 'word' is the col name"}, {"id": 58, "title": "pandas - drop row by condition", "content": "df.drop(df[(df['action'] != 'keep')].index)\r\ndf.drop(df[(df['estimated price']-df['price'] >= 1500)].index)\r\n\r\n# needs unique indices"}, {"id": 59, "title": "pandas - apply function", "content": "def get(x):\r\n  \tx['result'] =\"Hallo Welt\"\r\n  \t# Do stuff here\r\n  \treturn x\r\n  \r\ndf.apply(get)\r\n\r\n# Method 1\r\ndf['tokenized'] = df['punct'].apply(lambda x: tokenization(x.lower()))\r\n\r\ndef tokenization(text):\r\n    text = re.split('\\W+', text)\r\n    return text\r\n  \r\n# Method 2\r\ndef translate(row):\r\n    if len(str(row['lang_predict'])) == 2:\r\n      ...\r\n      \r\n      \r\ndf['translation'] = df.apply(translate, axis=1)\r\n\r\n# Method 3\r\n    def predict_lang(self, text):\r\n        predictions = self.model.predict(str(text), k=1) # returns top 1 matching languages\r\n        iso_code = predictions[0][0].split('_')[len(predictions[0][0].split('_'))-1]\r\n        propability = predictions[1][0]\r\n\r\n        if propability >0.5:\r\n            return iso_code\r\n        else:\r\n            return ''\r\ndf['lang_predict'] = df['text'].apply(LANGUAGE.predict_lang)"}]